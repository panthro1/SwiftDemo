/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "Person.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct PersonRoot {
    public static let `default` = PersonRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class PersonProto : GeneratedMessage {

    public static func == (lhs: PersonProto, rhs: PersonProto) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
        fieldCheck = fieldCheck && (lhs.hasSecondName == rhs.hasSecondName) && (!lhs.hasSecondName || lhs.secondName == rhs.secondName)
        fieldCheck = fieldCheck && (lhs.hasAge == rhs.hasAge) && (!lhs.hasAge || lhs.age == rhs.age)
        fieldCheck = fieldCheck && (lhs.phoneNumbers == rhs.phoneNumbers)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class PhoneNumber : GeneratedMessage {

        public static func == (lhs: PersonProto.PhoneNumber, rhs: PersonProto.PhoneNumber) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAreaCode == rhs.hasAreaCode) && (!lhs.hasAreaCode || lhs.areaCode == rhs.areaCode)
            fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var areaCode:Int32 = Int32(0)
        public fileprivate(set) var hasAreaCode:Bool = false

        public fileprivate(set) var phoneNumber:Int64 = Int64(0)
        public fileprivate(set) var hasPhoneNumber:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAreaCode {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:areaCode)
            }
            if hasPhoneNumber {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:phoneNumber)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAreaCode {
                serialize_size += areaCode.computeInt32Size(fieldNumber: 1)
            }
            if hasPhoneNumber {
                serialize_size += phoneNumber.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> PersonProto.PhoneNumber.Builder {
            return PersonProto.PhoneNumber.classBuilder() as! PersonProto.PhoneNumber.Builder
        }
        public func getBuilder() -> PersonProto.PhoneNumber.Builder {
            return classBuilder() as! PersonProto.PhoneNumber.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return PersonProto.PhoneNumber.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return PersonProto.PhoneNumber.Builder()
        }
        public func toBuilder() throws -> PersonProto.PhoneNumber.Builder {
            return try PersonProto.PhoneNumber.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:PersonProto.PhoneNumber) throws -> PersonProto.PhoneNumber.Builder {
            return try PersonProto.PhoneNumber.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAreaCode {
                jsonMap["areaCode"] = Int(areaCode)
            }
            if hasPhoneNumber {
                jsonMap["phoneNumber"] = "\(phoneNumber)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> PersonProto.PhoneNumber {
            return try PersonProto.PhoneNumber.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> PersonProto.PhoneNumber {
            return try PersonProto.PhoneNumber.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAreaCode {
                output += "\(indent) areaCode: \(areaCode) \n"
            }
            if hasPhoneNumber {
                output += "\(indent) phoneNumber: \(phoneNumber) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAreaCode {
                    hashCode = (hashCode &* 31) &+ areaCode.hashValue
                }
                if hasPhoneNumber {
                    hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "PersonProto.PhoneNumber"
        }
        override public func className() -> String {
            return "PersonProto.PhoneNumber"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:PersonProto.PhoneNumber = PersonProto.PhoneNumber()
            public func getMessage() -> PersonProto.PhoneNumber {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var areaCode:Int32 {
                get {
                    return builderResult.areaCode
                }
                set (value) {
                    builderResult.hasAreaCode = true
                    builderResult.areaCode = value
                }
            }
            public var hasAreaCode:Bool {
                get {
                    return builderResult.hasAreaCode
                }
            }
            @discardableResult
            public func setAreaCode(_ value:Int32) -> PersonProto.PhoneNumber.Builder {
                self.areaCode = value
                return self
            }
            @discardableResult
            public func clearAreaCode() -> PersonProto.PhoneNumber.Builder{
                builderResult.hasAreaCode = false
                builderResult.areaCode = Int32(0)
                return self
            }
            public var phoneNumber:Int64 {
                get {
                    return builderResult.phoneNumber
                }
                set (value) {
                    builderResult.hasPhoneNumber = true
                    builderResult.phoneNumber = value
                }
            }
            public var hasPhoneNumber:Bool {
                get {
                    return builderResult.hasPhoneNumber
                }
            }
            @discardableResult
            public func setPhoneNumber(_ value:Int64) -> PersonProto.PhoneNumber.Builder {
                self.phoneNumber = value
                return self
            }
            @discardableResult
            public func clearPhoneNumber() -> PersonProto.PhoneNumber.Builder{
                builderResult.hasPhoneNumber = false
                builderResult.phoneNumber = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> PersonProto.PhoneNumber.Builder {
                builderResult = PersonProto.PhoneNumber()
                return self
            }
            override public func clone() throws -> PersonProto.PhoneNumber.Builder {
                return try PersonProto.PhoneNumber.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> PersonProto.PhoneNumber {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> PersonProto.PhoneNumber {
                let returnMe:PersonProto.PhoneNumber = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:PersonProto.PhoneNumber) throws -> PersonProto.PhoneNumber.Builder {
                if other == PersonProto.PhoneNumber() {
                    return self
                }
                if other.hasAreaCode {
                    areaCode = other.areaCode
                }
                if other.hasPhoneNumber {
                    phoneNumber = other.phoneNumber
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> PersonProto.PhoneNumber.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto.PhoneNumber.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        areaCode = try codedInputStream.readInt32()

                    case 16:
                        phoneNumber = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> PersonProto.PhoneNumber.Builder {
                let resultDecodedBuilder = PersonProto.PhoneNumber.Builder()
                if let jsonValueAreaCode = jsonMap["areaCode"] as? Int {
                    resultDecodedBuilder.areaCode = Int32(jsonValueAreaCode)
                } else if let jsonValueAreaCode = jsonMap["areaCode"] as? String {
                    resultDecodedBuilder.areaCode = Int32(jsonValueAreaCode)!
                }
                if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? String {
                    resultDecodedBuilder.phoneNumber = Int64(jsonValuePhoneNumber)!
                } else if let jsonValuePhoneNumber = jsonMap["phoneNumber"] as? Int {
                    resultDecodedBuilder.phoneNumber = Int64(jsonValuePhoneNumber)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> PersonProto.PhoneNumber.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try PersonProto.PhoneNumber.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end

    public fileprivate(set) var firstName:String = ""
    public fileprivate(set) var hasFirstName:Bool = false

    public fileprivate(set) var secondName:String = ""
    public fileprivate(set) var hasSecondName:Bool = false

    public fileprivate(set) var age:Int32 = Int32(0)
    public fileprivate(set) var hasAge:Bool = false

    public fileprivate(set) var phoneNumbers:Array<PersonProto.PhoneNumber>  = Array<PersonProto.PhoneNumber>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasFirstName {
            try codedOutputStream.writeString(fieldNumber: 1, value:firstName)
        }
        if hasSecondName {
            try codedOutputStream.writeString(fieldNumber: 2, value:secondName)
        }
        if hasAge {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:age)
        }
        for oneElementPhoneNumbers in phoneNumbers {
              try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementPhoneNumbers)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasFirstName {
            serialize_size += firstName.computeStringSize(fieldNumber: 1)
        }
        if hasSecondName {
            serialize_size += secondName.computeStringSize(fieldNumber: 2)
        }
        if hasAge {
            serialize_size += age.computeInt32Size(fieldNumber: 3)
        }
        for oneElementPhoneNumbers in phoneNumbers {
            serialize_size += oneElementPhoneNumbers.computeMessageSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> PersonProto.Builder {
        return PersonProto.classBuilder() as! PersonProto.Builder
    }
    public func getBuilder() -> PersonProto.Builder {
        return classBuilder() as! PersonProto.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PersonProto.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return PersonProto.Builder()
    }
    public func toBuilder() throws -> PersonProto.Builder {
        return try PersonProto.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:PersonProto) throws -> PersonProto.Builder {
        return try PersonProto.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasFirstName {
            jsonMap["firstName"] = firstName
        }
        if hasSecondName {
            jsonMap["secondName"] = secondName
        }
        if hasAge {
            jsonMap["age"] = Int(age)
        }
        if !phoneNumbers.isEmpty {
            var jsonArrayPhoneNumbers:Array<Dictionary<String,Any>> = []
            for oneValuePhoneNumbers in phoneNumbers {
                let ecodedMessagePhoneNumbers = try oneValuePhoneNumbers.encode()
                jsonArrayPhoneNumbers.append(ecodedMessagePhoneNumbers)
            }
            jsonMap["phoneNumbers"] = jsonArrayPhoneNumbers
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> PersonProto {
        return try PersonProto.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> PersonProto {
        return try PersonProto.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasFirstName {
            output += "\(indent) firstName: \(firstName) \n"
        }
        if hasSecondName {
            output += "\(indent) secondName: \(secondName) \n"
        }
        if hasAge {
            output += "\(indent) age: \(age) \n"
        }
        var phoneNumbersElementIndex:Int = 0
        for oneElementPhoneNumbers in phoneNumbers {
            output += "\(indent) phoneNumbers[\(phoneNumbersElementIndex)] {\n"
            output += try oneElementPhoneNumbers.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            phoneNumbersElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFirstName {
                hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasSecondName {
                hashCode = (hashCode &* 31) &+ secondName.hashValue
            }
            if hasAge {
                hashCode = (hashCode &* 31) &+ age.hashValue
            }
            for oneElementPhoneNumbers in phoneNumbers {
                hashCode = (hashCode &* 31) &+ oneElementPhoneNumbers.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "PersonProto"
    }
    override public func className() -> String {
        return "PersonProto"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:PersonProto = PersonProto()
        public func getMessage() -> PersonProto {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var firstName:String {
            get {
                return builderResult.firstName
            }
            set (value) {
                builderResult.hasFirstName = true
                builderResult.firstName = value
            }
        }
        public var hasFirstName:Bool {
            get {
                return builderResult.hasFirstName
            }
        }
        @discardableResult
        public func setFirstName(_ value:String) -> PersonProto.Builder {
            self.firstName = value
            return self
        }
        @discardableResult
        public func clearFirstName() -> PersonProto.Builder{
            builderResult.hasFirstName = false
            builderResult.firstName = ""
            return self
        }
        public var secondName:String {
            get {
                return builderResult.secondName
            }
            set (value) {
                builderResult.hasSecondName = true
                builderResult.secondName = value
            }
        }
        public var hasSecondName:Bool {
            get {
                return builderResult.hasSecondName
            }
        }
        @discardableResult
        public func setSecondName(_ value:String) -> PersonProto.Builder {
            self.secondName = value
            return self
        }
        @discardableResult
        public func clearSecondName() -> PersonProto.Builder{
            builderResult.hasSecondName = false
            builderResult.secondName = ""
            return self
        }
        public var age:Int32 {
            get {
                return builderResult.age
            }
            set (value) {
                builderResult.hasAge = true
                builderResult.age = value
            }
        }
        public var hasAge:Bool {
            get {
                return builderResult.hasAge
            }
        }
        @discardableResult
        public func setAge(_ value:Int32) -> PersonProto.Builder {
            self.age = value
            return self
        }
        @discardableResult
        public func clearAge() -> PersonProto.Builder{
            builderResult.hasAge = false
            builderResult.age = Int32(0)
            return self
        }
        public var phoneNumbers:Array<PersonProto.PhoneNumber> {
            get {
                return builderResult.phoneNumbers
            }
            set (value) {
                builderResult.phoneNumbers = value
            }
        }
        @discardableResult
        public func setPhoneNumbers(_ value:Array<PersonProto.PhoneNumber>) -> PersonProto.Builder {
            self.phoneNumbers = value
            return self
        }
        @discardableResult
        public func clearPhoneNumbers() -> PersonProto.Builder {
            builderResult.phoneNumbers.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> PersonProto.Builder {
            builderResult = PersonProto()
            return self
        }
        override public func clone() throws -> PersonProto.Builder {
            return try PersonProto.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> PersonProto {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> PersonProto {
            let returnMe:PersonProto = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:PersonProto) throws -> PersonProto.Builder {
            if other == PersonProto() {
                return self
            }
            if other.hasFirstName {
                firstName = other.firstName
            }
            if other.hasSecondName {
                secondName = other.secondName
            }
            if other.hasAge {
                age = other.age
            }
            if !other.phoneNumbers.isEmpty  {
                 builderResult.phoneNumbers += other.phoneNumbers
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> PersonProto.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    firstName = try codedInputStream.readString()

                case 18:
                    secondName = try codedInputStream.readString()

                case 24:
                    age = try codedInputStream.readInt32()

                case 34:
                    let subBuilder = PersonProto.PhoneNumber.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    phoneNumbers.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> PersonProto.Builder {
            let resultDecodedBuilder = PersonProto.Builder()
            if let jsonValueFirstName = jsonMap["firstName"] as? String {
                resultDecodedBuilder.firstName = jsonValueFirstName
            }
            if let jsonValueSecondName = jsonMap["secondName"] as? String {
                resultDecodedBuilder.secondName = jsonValueSecondName
            }
            if let jsonValueAge = jsonMap["age"] as? Int {
                resultDecodedBuilder.age = Int32(jsonValueAge)
            } else if let jsonValueAge = jsonMap["age"] as? String {
                resultDecodedBuilder.age = Int32(jsonValueAge)!
            }
            if let jsonValuePhoneNumbers = jsonMap["phoneNumbers"] as? Array<Dictionary<String,Any>> {
                var jsonArrayPhoneNumbers:Array<PersonProto.PhoneNumber> = []
                for oneValuePhoneNumbers in jsonValuePhoneNumbers {
                    let messageFromStringPhoneNumbers = try PersonProto.PhoneNumber.Builder.decodeToBuilder(jsonMap:oneValuePhoneNumbers).build()

                    jsonArrayPhoneNumbers.append(messageFromStringPhoneNumbers)
                }
                resultDecodedBuilder.phoneNumbers = jsonArrayPhoneNumbers
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> PersonProto.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try PersonProto.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension PersonProto: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<PersonProto> {
        var mergedArray = Array<PersonProto>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> PersonProto? {
        return try PersonProto.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(data: data, extensionRegistry:PersonRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto {
        return try PersonProto.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "firstName": return self.firstName
        case "secondName": return self.secondName
        case "age": return self.age
        case "phoneNumbers": return self.phoneNumbers
        default: return nil
        }
    }
}
extension PersonProto.PhoneNumber: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<PersonProto.PhoneNumber> {
        var mergedArray = Array<PersonProto.PhoneNumber>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> PersonProto.PhoneNumber? {
        return try PersonProto.PhoneNumber.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(data: data, extensionRegistry:PersonRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PersonProto.PhoneNumber {
        return try PersonProto.PhoneNumber.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "areaCode": return self.areaCode
        case "phoneNumber": return self.phoneNumber
        default: return nil
        }
    }
}
extension PersonProto.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "firstName": return self.firstName
            case "secondName": return self.secondName
            case "age": return self.age
            case "phoneNumbers": return self.phoneNumbers
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "firstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.firstName = newSubscriptValue
            case "secondName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.secondName = newSubscriptValue
            case "age":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.age = newSubscriptValue
            case "phoneNumbers":
                guard let newSubscriptValue = newSubscriptValue as? Array<PersonProto.PhoneNumber> else {
                    return
                }
                self.phoneNumbers = newSubscriptValue
            default: return
            }
        }
    }
}
extension PersonProto.PhoneNumber.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "areaCode": return self.areaCode
            case "phoneNumber": return self.phoneNumber
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "areaCode":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.areaCode = newSubscriptValue
            case "phoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.phoneNumber = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
